#!/usr/bin/env python
""" submit_test_compose_oidc.py - Submit a test compose, via OpenID Connect.

If you have problems authenticating, try::

    $ rm -rf ~/.openidc/

Example usage::

    export PYTHONPATH=.:$VIRTUAL_ENV/lib/python2.7/site-packages:client
    ./submit_test_compose_oidc.py \
        --staging \
        --source f26 \
        --source-type tag \
        --flag no_deps \
        python-requests python-urllib3

"""
from __future__ import print_function

import argparse
import sys
import textwrap

import openidc_client
import requests.exceptions

import odcs.client.odcs

env_config = {
    'fedora': {
        'prod': {
            'server_url': 'https://odcs.fedoraproject.org',
        },
        'staging': {
            'server_url': 'https://odcs.stg.fedoraproject.org',
        }
    },
    'redhat': {
        'prod': {
            'server_url': 'https://odcs.engineering.redhat.com',
        },
        'staging': {
            'server_url': 'https://odcs.stage.engineering.redhat.com',
        }
    }
}

id_provider_config = {
    'prod': 'https://id.fedoraproject.org/openidc/',
    'staging': 'https://id.stg.fedoraproject.org/openidc/',
}

parser = argparse.ArgumentParser(
    description=textwrap.dedent(__doc__),
    formatter_class=argparse.RawDescriptionHelpFormatter,
)
parser.add_argument(
    '--redhat', action='store_const',
    const='redhat', default='fedora', dest='infra',
    help='Use internal ODCS infra environment. If omitted, Fedora Infra will '
         'be used by default.')
parser.add_argument(
    '--staging', action='store_const',
    const='staging', default='prod', dest='env',
    help='Use Fedora Infra staging environment, or internal\'s if --redhat '
         'is specified. Otherwise production environment will be used.')

subparsers = parser.add_subparsers(
    description='These commands you can use to operate composes with ODCS')
create_parser = subparsers.add_parser(
    'create', help='create a new compose')
create_parser.add_argument(
    '--source', default=None, required=True,
    help="Source for the compose.  May be a koji tag or a "
    "whitespace separated list of modules.")
create_parser.add_argument(
    '--source-type', default=None, required=True,
    choices=['tag', 'module', 'raw_config'],
    help="Type for the source.  Must be 'tag' or 'module'")
create_parser.add_argument(
    '--flag', default=[], action='append',
    help="Flag to pass to influence the compose.")
create_parser.add_argument(
    '--result', default=[], action='append',
    help="Results of a compose to influence the compose.")
create_parser.add_argument(
    'packages', metavar='package', nargs='*',
    help='Packages to be included in the compose.')

args = parser.parse_args()


odcs_url = env_config[args.infra][args.env]['server_url']

if args.infra == 'fedora':
    id_provider = id_provider_config[args.env]

    # Get the auth token using the OpenID client.
    oidc = openidc_client.OpenIDCClient(
        'odcs',
        id_provider,
        {'Token': 'Token', 'Authorization': 'Authorization'},
        'odcs-authorizer',
        'notsecret',
    )

    scopes = [
        'openid',
        'https://id.fedoraproject.org/scope/groups',
        'https://pagure.io/odcs/new-compose',
        'https://pagure.io/odcs/renew-compose',
        'https://pagure.io/odcs/delete-compose',
    ]
    try:
        token = oidc.get_token(scopes, new_token=True)
        token = oidc.report_token_issue()
    except requests.exceptions.HTTPError as e:
        print(e.response.text)
        raise

    client = odcs.client.odcs.ODCS(
        odcs_url,
        auth_mech=odcs.client.odcs.AuthMech.OpenIDC,
        openidc_token=token,
    )
else:
    client = odcs.client.odcs.ODCS(
        odcs_url,
        auth_mech=odcs.client.odcs.AuthMech.Kerberos,
    )

result = client.new_compose(
    source=args.source,
    source_type=args.source_type,
    packages=args.packages,
    results=args.result,
    flags=args.flag,
)
print(result)
